[{"/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/index.js":"1","/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/App.js":"2","/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/WeatherM.js":"3","/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/suggestion.js":"4","/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/location.jsx":"5","/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/Location.jsx":"6","/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/Data.jsx":"7"},{"size":173,"mtime":1648538413978,"results":"8","hashOfConfig":"9"},{"size":178,"mtime":1648919038505,"results":"10","hashOfConfig":"9"},{"size":4960,"mtime":1648980684683,"results":"11","hashOfConfig":"9"},{"size":64986,"mtime":1648810380464,"results":"12","hashOfConfig":"9"},{"size":732,"mtime":1648889680689,"results":"13","hashOfConfig":"9"},{"size":275,"mtime":1648974917058,"results":"14","hashOfConfig":"9"},{"size":823,"mtime":1648977974192,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"unzwrc",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/index.js",[],[],["44","45"],"/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/App.js",["46"],[],"import React, { useEffect } from \"react\";\nimport WeatherM from \"./components/WeatherM\";\n\nfunction App() {\n  return (\n    <>\n      <WeatherM/>\n    </>\n  );\n}\n\nexport default App;\n",["47","48"],"/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/WeatherM.js",["49","50"],[],"import React, { useEffect, useState} from \"react\";\nimport \"./weather.css\"\nimport { suggestion } from \"./suggestion\";\nimport Location from \"./Location\";\nimport Tooltip from '@mui/material/Tooltip';\nimport Data from \"./Data\";\n\nconst WeatherM =() =>\n{\n    const [crntCity, setCrntCity] = useState(\"\");\n    const [name , setName] = useState(\"\");\n    const [fetchCity, fetchCrntCityName] = useState(\"\");\n    const [suggarr , setSuggArr] =  useState([]);\n    const [crntTemp , setCrntTemp] = useState([]);\n    const [latitude , setLatitude ] = useState(null);\n    const [longitude , setLongitude] = useState(null);\n\n    useEffect(()=>{\n        navigator.geolocation.getCurrentPosition((position) =>{\n            setLatitude(position.coords.latitude);\n            setLongitude(position.coords.longitude);\n        })\n    },[])\n\n    useEffect(async ()=>{\n        const res = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\" +  name   +\"&units=metric&appid=9e4cdd6c628c4cbdcacc25b6df594009\"); \n        const result = await res.json();\n        setCrntTemp(result.main);\n        fetchCrntCityName(result.name);\n    },[name])\n\n    const doChange = (event) =>\n    {\n        const {value} = event.target;\n        setCrntCity(value);\n        if(value !== \"\"){\n            suggestion(value).then((response)=>{\n                setSuggArr(response);\n            });\n        }else setSuggArr([]);\n    }\n    const searchData = () =>{\n        setName(crntCity);\n    }\n    const searchCrntLocation = async () =>{\n        const response  =  await Location(latitude , longitude);\n        const result =  await response;\n        setCrntCity(result.name);\n    }\n    var ind = 0;\n    return(\n        <>\n            <div className=\"Body_wrapper\">\n                <div className=\"card_wrapper\">\n                    <div className=\"card\">\n                        <div className=\"card_header\">\n                            <div className=\"search_wrapper\">\n                                <div className=\"search_bar\">\n                                    <input \n                                        type=\"text\"\n                                        placeholder=\"Enter City Name\"\n                                        onChange={doChange}\n                                        value = {crntCity}\n                                    />\n                                    <Tooltip title=\"Click to find your current Location\" style={{\"fontSize\" : \"2rem\"}}>\n                                        <button onClick={() =>{\n                                            if(latitude == null)\n                                                alert(\"Allow use Location to find your cuurent location\")\n                                            else {\n                                                setCrntCity(\"searching for Location...\");\n                                                searchCrntLocation();\n                                            }\n                                        }} className=\"crntLocator\"> <i className=\"fa-solid fa-location-crosshairs\"></i> </button>\n                                    </Tooltip>\n                                    <div className=\"suggestion_section\">\n                                    {suggarr.map((elem , index) => {\n                                            if(ind<9){\n                                                ind ++;\n                                                return(\n                                                <h1 key={index} className=\"suggestions\" onClick={() =>{\n                                                setCrntCity(elem.city);                                \n                                                setSuggArr([]);}}> \n                                                {elem.city} , {elem.state} \n                                                </h1>\n                                                )\n                                            }\n                                            return ;\n                                        })}\n                                    </div>\n                                </div>\n                                <button onClick= {searchData}>search</button>\n                            </div>\n                        </div>\n                        {!crntTemp? (\n                            <p className=\"data-exception\">No data Found </p>\n                        ):(\n                            <Data \n                                cityname = {fetchCity} \n                                temp={crntTemp.temp} \n                                temp_min = {crntTemp.temp_min}\n                                temp_max = {crntTemp.temp_max}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default WeatherM\n\n// <i class=\"fa-solid fa-location-crosshairs\"></i>\n// fetchCityName\n// crntTemp.temp\n// crntTemp.temp_min\n// crntTemp.temp_max","/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/suggestion.js",[],[],"/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/location.jsx",["51"],[],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nexport const Location = () =>\n{\n    const [latitude , setLatitude] = useState(\"\");\n    const [longitude , setLongitude] = useState(\"\");\n    const [crntCity , setCrntCity] = useState(\"\");\n    navigator.geolocation.getCurrentPosition((position) =>{\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n    })\n    const API = \"https://api.openweathermap.org/data/2.5/weather?lat=\"+ latitude + \"&lon=\"+ longitude+\"&appid=9e4cdd6c628c4cbdcacc25b6df594009\"\n    useEffect(()=>{\n        axios.get(API).then((response) => setCrntCity(response.data.name));\n    },[latitude,longitude])\n    return crntCity;\n}",["52","53"],"/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/Location.jsx",[],[],["54","55"],"/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/Data.jsx",[],[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":26},{"ruleId":"56","replacedBy":"64"},{"ruleId":"58","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":25,"column":15,"nodeType":"68","endLine":30,"endColumn":6},{"ruleId":"69","severity":1,"message":"70","line":87,"column":45,"nodeType":"71","messageId":"72","endLine":87,"endColumn":53},{"ruleId":"66","severity":1,"message":"73","line":16,"column":7,"nodeType":"74","endLine":16,"endColumn":27,"suggestions":"75"},{"ruleId":"56","replacedBy":"76"},{"ruleId":"58","replacedBy":"77"},{"ruleId":"56","replacedBy":"78"},{"ruleId":"58","replacedBy":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["80"],["81"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'API'. Either include it or remove the dependency array.","ArrayExpression",["82"],["80"],["81"],["80"],["81"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [API, latitude, longitude]",{"range":"85","text":"86"},[669,689],"[API, latitude, longitude]"]