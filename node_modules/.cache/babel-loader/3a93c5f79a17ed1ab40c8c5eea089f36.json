{"ast":null,"code":"var _jsxFileName = \"/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/WeatherM.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./weather.css\";\nimport { suggestion } from \"./suggestion\";\nimport axios from \"axios\";\nimport Location from \"./Location\";\nimport Tooltip from '@mui/material/Tooltip';\nimport Data from \"./Data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WeatherM = () => {\n  _s();\n\n  const [crntCity, setCrntCity] = useState(\"\");\n  const [fetchCityName, fetchCrntCityName] = useState(\"\");\n  const [crntTemp, setCrntTemp] = useState([]);\n  const [name, setName] = useState(\"tokyo\");\n  const [suggarr, setSuggArr] = useState([]);\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    });\n  }, []);\n  useEffect(async () => {\n    const res = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\" + name + \"&units=metric&appid=9e4cdd6c628c4cbdcacc25b6df594009\");\n    const result = await res.json();\n    setCrntTemp(result.main);\n    fetchCrntCityName(result.name);\n  }, [name]);\n\n  const doChange = event => {\n    const {\n      value\n    } = event.target;\n    setCrntCity(value);\n\n    if (value !== \"\") {\n      suggestion(value).then(response => {\n        setSuggArr(response);\n      });\n    } else setSuggArr([]);\n  };\n\n  const searchData = () => {\n    setName(crntCity);\n  };\n\n  const searchCrntLocation = async () => {\n    const response = await Location(latitude, longitude);\n    const result = await response;\n    setCrntCity(result.name);\n  };\n\n  var ind = 0;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Body_wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card_wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card_header\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"search_wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"search_bar\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Enter City Name\",\n                  onChange: doChange,\n                  value: crntCity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: \"Click to find your current Location\",\n                  style: {\n                    \"fontSize\": \"2rem\"\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      setCrntCity(\"searching for Location...\");\n                      searchCrntLocation();\n                    },\n                    className: \"crntLocator\",\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"fa-solid fa-location-crosshairs\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 67,\n                      columnNumber: 69\n                    }, this), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 64,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"suggestion_section\",\n                  children: suggarr.map((elem, index) => {\n                    if (ind < 4) {\n                      ind++;\n                      return /*#__PURE__*/_jsxDEV(\"h1\", {\n                        className: \"suggestions\",\n                        onClick: () => {\n                          setCrntCity(elem.city);\n                          setSuggArr([]);\n                        },\n                        children: [elem.city, \" , \", elem.state]\n                      }, index, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 74,\n                        columnNumber: 49\n                      }, this);\n                    }\n\n                    return;\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: searchData,\n                children: \"search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), !crntTemp ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"data-exception\",\n            children: \"No data Found \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(Data, {\n            cityname: fetchCityName,\n            temp: crntTemp.temp,\n            temp_min: crntTemp.temp_min,\n            temp_max: crntTemp.temp_max\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(WeatherM, \"32EMEgnBTYg5ZR9FJKSycdJqDSI=\");\n\n_c = WeatherM;\nexport default WeatherM; // <i class=\"fa-solid fa-location-crosshairs\"></i>\n// fetchCityName\n// crntTemp.temp\n// crntTemp.temp_min\n// crntTemp.temp_max\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherM\");","map":{"version":3,"sources":["/Users/manavpanchal/Downloads/codes/reactJs/weathertracker/src/components/WeatherM.js"],"names":["React","useEffect","useState","suggestion","axios","Location","Tooltip","Data","WeatherM","crntCity","setCrntCity","fetchCityName","fetchCrntCityName","crntTemp","setCrntTemp","name","setName","suggarr","setSuggArr","latitude","setLatitude","longitude","setLongitude","navigator","geolocation","getCurrentPosition","position","coords","res","fetch","result","json","main","doChange","event","value","target","then","response","searchData","searchCrntLocation","ind","map","elem","index","city","state","temp","temp_min","temp_max"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from \"react\";\nimport \"./weather.css\"\nimport { suggestion } from \"./suggestion\";\nimport axios from \"axios\";\nimport Location from \"./Location\";\nimport Tooltip from '@mui/material/Tooltip';\nimport Data from \"./Data\";\n\nconst WeatherM =() =>\n{\n    const [crntCity, setCrntCity] = useState(\"\");\n    const [fetchCityName, fetchCrntCityName] = useState(\"\");\n    const [crntTemp , setCrntTemp] = useState([]);\n    const [name , setName] = useState(\"tokyo\");\n    const [suggarr , setSuggArr] =  useState([]);\n    const [latitude , setLatitude ] = useState(null);\n    const [longitude , setLongitude] = useState(null);\n    useEffect(()=>{\n        navigator.geolocation.getCurrentPosition((position) =>{\n            setLatitude(position.coords.latitude);\n            setLongitude(position.coords.longitude);\n        })\n    },[])\n    useEffect(async ()=>{\n        const res = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\" +  name   +\"&units=metric&appid=9e4cdd6c628c4cbdcacc25b6df594009\"); \n        const result = await res.json();\n        setCrntTemp(result.main);\n        fetchCrntCityName(result.name);\n    },[name])\n    const doChange = (event) =>\n    {\n        const {value} = event.target;\n        setCrntCity(value);\n        if(value !== \"\"){\n            suggestion(value).then((response)=>{\n                setSuggArr(response);\n            });\n        }else setSuggArr([]);\n    }\n    const searchData = () =>{\n        setName(crntCity);\n    }\n    const searchCrntLocation = async () =>{\n        const response  =  await Location(latitude , longitude);\n        const result =  await response;\n        setCrntCity(result.name);\n    }\n    var ind = 0;\n    return(\n        <>\n            <div className=\"Body_wrapper\">\n                <div className=\"card_wrapper\">\n                    <div className=\"card\">\n                        <div className=\"card_header\">\n                            <div className=\"search_wrapper\">\n                                <div className=\"search_bar\">\n                                    <input \n                                        type=\"text\"\n                                        placeholder=\"Enter City Name\"\n                                        onChange={doChange}\n                                        value = {crntCity}\n                                    />\n                                    <Tooltip title=\"Click to find your current Location\" style={{\"fontSize\" : \"2rem\"}}>\n                                        <button onClick={() =>{\n                                            setCrntCity(\"searching for Location...\");\n                                            searchCrntLocation();\n                                        }} className=\"crntLocator\"> <i className=\"fa-solid fa-location-crosshairs\"></i> </button>\n                                    </Tooltip>\n                                    <div className=\"suggestion_section\">\n                                    {suggarr.map((elem , index) => {\n                                            if(ind<4){\n                                                ind ++;\n                                                return(\n                                                <h1 key={index} className=\"suggestions\" onClick={() =>{\n                                                setCrntCity(elem.city);                                \n                                                setSuggArr([]);}}> \n                                                {elem.city} , {elem.state} \n                                                </h1>\n                                                )\n                                            }\n                                            return ;\n                                        })}\n                                    </div>\n                                </div>\n                                <button onClick= {searchData}>search</button>\n                            </div>\n                        </div>\n                        {!crntTemp? (\n                            <p className=\"data-exception\">No data Found </p>\n                        ):(\n                            <Data \n                                cityname = {fetchCityName} \n                                temp={crntTemp.temp} \n                                temp_min = {crntTemp.temp_min}\n                                temp_max = {crntTemp.temp_max}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default WeatherM\n\n// <i class=\"fa-solid fa-location-crosshairs\"></i>\n// fetchCityName\n// crntTemp.temp\n// crntTemp.temp_min\n// crntTemp.temp_max"]},"metadata":{},"sourceType":"module"}